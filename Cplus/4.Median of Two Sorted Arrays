//方法1
double findkth(vector<int> nums1, vector<int> nums2, int k)
{
	int m = nums1.size(), n = nums2.size();
	if (m>n)
	{
		return findkth(nums2, nums1, k);
	}
	if (m == 0)
	{
		return nums2[k - 1];
	}
	if (k == 1)
	{
		return ((nums1[0]<nums2[0]) ? nums1[0] : nums2[0]);
	}

	int pa = min(k / 2, m), pb = k - pa;
	if (nums1[pa - 1]<nums2[pb - 1])
	{
		nums1.erase(nums1.begin(), nums1.begin() + pa);
		return findkth(nums1, nums2, k - pa);
	}
	else if (nums1[pa - 1]>nums2[pb - 1])
	{
		nums2.erase(nums2.begin(), nums2.begin() + pb);
		return findkth(nums1, nums2, k - pb);
	}
	else return nums1[pa - 1];
	

}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
{
	int total = nums1.size() + nums2.size();
	if (total & 0x01)
	{
		return findkth(nums1, nums2, total / 2 + 1);
	}
	else
	{
		return((findkth(nums1, nums2, total / 2)) + (findkth(nums1, nums2, total / 2 + 1))) / 2;
	}

}
//方法2
double findMedianSortedArrays1(vector<int>& nums1, vector<int>& nums2)
{
	int m = nums1.size(), n = nums2.size();
	if (m > n)
		return findMedianSortedArrays1(nums2, nums1);
	int size = m + n + 1;
	int i = m/2, j;
	double max_l, min_r;
	while ((i <= m)&&(i>=0))
	{
		j = size / 2 - i;
	    if((i<m)&&(nums2[j-1]>nums1[i]))
		{
			i++;
		}
		else if ((i > 0) && (nums1[i - 1] > nums2[j])) i--;
		else//((i == 0) || (i == m) || (nums1[i - 1] <= nums2[j])) && ((j == 0) || (j == n) || (nums2[j - 1] <= nums1[i]))
		{
			if (i == 0) max_l = nums2[j - 1];
			else if (j == 0) max_l = nums1[i - 1];
			else max_l = max(nums1[i - 1], nums2[j - 1]);

			if (size % 2==0) return max_l;

			if (i == m) min_r = nums2[j];
			else if (j == n) min_r = nums1[i];
			else min_r = min(nums1[i], nums2[j]);

			return (max_l + min_r) / 2;
		}
	
	}
	return 0;
	
}
