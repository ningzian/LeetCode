lambda表达式，刚开始的排序很巧妙
保证了每次输入的start都大于已处理的最后一个的start



/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) 
    {
        sort(intervals.begin(),intervals.end(),[](const Interval &lhs, const Interval &rhs){return lhs.start<rhs.start;} );
        
        vector<Interval> ans;
        if(intervals.empty()) return ans;
        ans.push_back(intervals.front());
        for(auto i = intervals.begin()+1;i<intervals.end();i++)
        {
            if((*i).start > ans.back().end) ans.push_back(*i);
            else if(ans.back().end < (*i).end ) ans.back().end = (*i).end;
        }
        return ans;
    }
};
