Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers 
along its path.

Note: You can only move either down or right at any point in time.


class Solution {
public:
    int minPathSum(const vector<vector<int>>& grid) 
    {
        int n = grid.size();    //行
        int m = grid.front().size();//列
        
        vector<vector<int>> dp(n,vector<int>(m,0));
        //初始化第一行和第一列
        int sum = 0;
        for(int i = 0;i<n;i++)//第一列
        {
            sum += grid[i].front();
            dp[i].front() = sum;
        }
        sum = 0;
        for(int i = 0;i<m;i++)//第一行
        {
            sum+=grid.front()[i];
            dp.front()[i] = sum;
        }
        
        
        for(int i = 1;i<n;i++)
        {
            for(int j = 1;j<m;j++)
            {
                dp[i][j] = grid[i][j]+(dp[i-1][j] < dp[i][j-1]? dp[i-1][j]:dp[i][j-1]);
            }
        }
        return dp[n-1][m-1];
    }
};
