int longestValidParentheses(string s) 
    {
        /* 动态规划算法 */
       /* int n = s.size();
        int max = 0;
        vector<int> dp(n,0);
        for(int i = 1;i<n;i++)
        {
            if((s[i]==')')&&(i>0))
            {
                if(s[i-1]=='(')
                {
                    dp[i] = (i>2? dp[i-2]:0)+2;
                }
                else if((i>dp[i-1])&&(s[i-dp[i-1]-1]=='('))
                {
                    dp[i] = dp[i-1]+(i-dp[i-1]>=2 ? dp[i-dp[i-1]-2]:0)+2;
                }
            }
            if(dp[i]>max)
                max = dp[i];
        }
        return max;*/
        
        /* 使用栈 */
       /* int max =0;
        stack<int> st;
        st.push(-1);
        for(int i = 0;i<s.size();i++)
        {
            if(s[i] == '(') st.push(i);
            else
            {
                st.pop();
                if(st.empty())
                {
                    st.push(i);
                }
                else if((i-st.top())>max)
                {
                    max = i-st.top();
                }
            }
        }
        return max;*/
        
        /* 不使用额外的空间 */
        int left=0, right=0, max =0;
        for(auto i:s)
        {
            if(i=='(') left++;
            else right++;
            
            if((left==right)&&(2*left>max)) max=2*left;
            else if(right>left)
            {
                right=0;
                left=0;
            }
        }
        
        right =0;
        left=0;
        for(auto i = s.rbegin();i<s.rend();i++)
        {
            if(*i == '(') left++;
            else right++;
            
            if((left==right)&&(2*left>max)) max = 2*left;
            else if(left>right)
            {
                right=0;
                left=0;
            }
        }
        return max;
        
        
    }
