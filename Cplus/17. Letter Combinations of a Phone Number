/* 使用单项队列，先进去的元素先出来。
  每输入一个数字，就需要把这个数字对应的每个字母加到前面的每个字符串中。一共需要加n（3或4）次。不需要复制之前的字符串，只需要每个添加后，删除即可
  标准库有个容器是queue，但是只是提供相关接口（空、入队、出队、），是基于list,deque,等，默认基于deque，并没有迭代器可用，除了头和尾，不能访问中间的元素
  */
vector<string> letterCombinations(string digits) 
    {
        deque<string> ans;
        vector<string> map = {"0","1","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        ans.push_back("");
        for(int i = 0;i<digits.size();i++)
        {
            int x = digits[i]-'0';//数字
            while(ans[0].size()==i)
            {
                string tem = ans.front();
                ans.pop_front();
                for(char t : map[x])
                {
                    ans.push_back(tem+t);
                }
            }
        }
        vector<string> a;
        for(string t : ans)
        {
            if(!t.empty())
                a.push_back(t);
        }
        return a;
        
    }
